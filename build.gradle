plugins {
    id 'application'
    alias(libs.plugins.osdetector)
    alias(libs.plugins.springboot)
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

group 'bisq'

apply plugin: 'com.google.osdetector'
apply plugin: "org.springframework.boot"
apply plugin: 'io.spring.dependency-management'

version = file("src/main/resources/version.txt").text.trim()

application {
    project.mainClassName = 'bisq.price.Main'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

jar.manifest.attributes(
        "Implementation-Title": project.name,
        "Implementation-Version": version
)

configurations.all {
    exclude group: 'bisq', module: 'proto'
    exclude group: 'bisq', module: 'p2p'
    exclude group: 'com.github.bisq-network:bitcoinj'
    exclude group: 'com.github.bisq-network.netlayer'
    exclude group: 'com.github.bisq-network.tor-binary'
    exclude group: 'io.grpc'
    exclude group: 'org.fxmisc.easybind'
}

dependencies {
    // We need three subprojects from includeBuild('bisq'), with some of their transitive dependencies.
    implementation 'bisq:assets'
    implementation 'bisq:common'
    implementation 'bisq:core'

    implementation libs.bundles.knowm.xchange.libs

    implementation libs.logback.core
    implementation libs.logback.classic
    compileOnly libs.lombok
    annotationProcessor libs.lombok
    implementation libs.slf4j.api

    implementation(libs.spring.boot.starter.web) {
        exclude group: 'ch.qos.logback'
        exclude group: 'org.slf4j'
    }

    testAnnotationProcessor libs.lombok
    testCompileOnly libs.lombok
    testImplementation libs.junit.jupiter
    testImplementation libs.mockito.core
}

assemble {
    doLast {
        // Copy generated bisq-pricenode scripts to project's root dir.
        copy {
            from layout.buildDirectory.dir('scripts')
            into projectDir
        }
        // Copy zipped distribution libs to project's top-level lib dir.
        copy {
            def distFolderName = project.name + '-' + version
            def distZipName = buildDir.name + '/distributions/' + distFolderName + '.zip'
            from(zipTree(distZipName)) {
                include "$distFolderName/lib/**"
                eachFile { fcd ->
                    fcd.relativePath = new RelativePath(true, fcd.relativePath.segments.drop(2))
                }
                includeEmptyDirs = false
            }
            into "${projectDir}/lib"
        }
        // Edit generated shell script so it expects to be executed in
        // the project's root dir as opposed to a 'bin' subdirectory.
        if (osdetector.os != 'windows') {
            // Delete the windows .bat script, not the *nix script alone.
            delete fileTree(dir: projectDir, include: 'bisq-*.bat')
            // Reset APP_HOME variable in *nix script.
            def nixScriptFile = file("${projectDir}/${project.name}")
            def oldAppHome = 'APP_HOME=$( cd "${APP_HOME:-./}.." && pwd -P ) || exit'
            def newAppHome = 'APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit'
            nixScriptFile.text = nixScriptFile.text.replace(oldAppHome, newAppHome)
        } else {
            // Delete the *nix script, not the windows .bat script.
            delete fileTree(dir: projectDir, include: 'bisq-*', exclude: '*.bat')
            // Reset APP_HOME variable in windows .bat script.
            def windowsScriptFile = file("${projectDir}/${project.name}.bat")
            windowsScriptFile.text = windowsScriptFile.text.replace('set APP_HOME=%DIRNAME%..', 'set APP_HOME=%DIRNAME%')
        }
    }
}

clean.doFirst {
    // Remove the project root level 'bisq-*' scripts and 'lib' dir generated at the end of the assemble task.
    delete fileTree(dir: projectDir, include: 'bisq-*'), 'lib'
}

test {
    useJUnitPlatform()
}
